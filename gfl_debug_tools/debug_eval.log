loading annotations into memory...
Done (t=0.00s)
creating index...
index created!
Use load_from_local loader
[                                                  ] 0/1, elapsed: 0s, ETA:/paddle/mmdetection/mmdet/core/anchor/builder.py:16: UserWarning: ``build_anchor_generator`` would be deprecated soon, please use ``build_prior_generator`` 
  '``build_anchor_generator`` would be deprecated soon, please use '
=======backbone start=======
backbone out:  torch.Size([1, 256, 200, 304]) tensor(0.16510303, device='cuda:0')
backbone out:  torch.Size([1, 512, 100, 152]) tensor(0.13000056, device='cuda:0')
backbone out:  torch.Size([1, 1024, 50, 76]) tensor(0.06177905, device='cuda:0')
backbone out:  torch.Size([1, 2048, 25, 38]) tensor(0.03233691, device='cuda:0')
=======backbone end=======
========fpn laterals start=====
laterals:  torch.Size([1, 256, 100, 152]) tensor(0.16211355, device='cuda:0')
laterals:  torch.Size([1, 256, 50, 76]) tensor(0.13541526, device='cuda:0')
laterals:  torch.Size([1, 256, 25, 38]) tensor(0.14547825, device='cuda:0')
========fpn laterals end=====
========fpn output start=====
fpn output:  torch.Size([1, 256, 100, 152]) tensor(0.28635523, device='cuda:0')
fpn output:  torch.Size([1, 256, 50, 76]) tensor(0.20911758, device='cuda:0')
fpn output:  torch.Size([1, 256, 25, 38]) tensor(0.16129225, device='cuda:0')
========fpn output end=====
======gfl head start======
cls_feat:  torch.Size([1, 256, 100, 152]) tensor(0.15992129, device='cuda:0')
reg_feat:  torch.Size([1, 256, 100, 152]) tensor(0.20891401, device='cuda:0')
=====gfl head end======
======gfl head start======
cls_feat:  torch.Size([1, 256, 50, 76]) tensor(0.16401716, device='cuda:0')
reg_feat:  torch.Size([1, 256, 50, 76]) tensor(0.20757332, device='cuda:0')
=====gfl head end======
======gfl head start======
cls_feat:  torch.Size([1, 256, 25, 38]) tensor(0.16479337, device='cuda:0')
reg_feat:  torch.Size([1, 256, 25, 38]) tensor(0.20632464, device='cuda:0')
=====gfl head end======
======gfl head start======
cls_feat:  torch.Size([1, 256, 13, 19]) tensor(0.17189869, device='cuda:0')
reg_feat:  torch.Size([1, 256, 13, 19]) tensor(0.21090816, device='cuda:0')
=====gfl head end======
======gfl head start======
cls_feat:  torch.Size([1, 256, 7, 10]) tensor(0.17220522, device='cuda:0')
reg_feat:  torch.Size([1, 256, 7, 10]) tensor(0.21392708, device='cuda:0')
=====gfl head end======
=====get singe bbox start=======
scores:  torch.Size([1, 15200, 80]) tensor(0.00173918, device='cuda:0')
scores:  torch.Size([1, 3800, 80]) tensor(0.00234453, device='cuda:0')
scores:  torch.Size([1, 950, 80]) tensor(0.00325949, device='cuda:0')
scores:  torch.Size([1, 247, 80]) tensor(0.00253165, device='cuda:0')
scores:  torch.Size([1, 70, 80]) tensor(0.00222026, device='cuda:0')
=====get singe bbox end=======
======decode start========
batch_mlvl_bboxes:  torch.Size([1, 3267, 4]) tensor(299.27038574, device='cuda:0')
batch_mlvl_scores:  torch.Size([1, 3267, 81]) tensor(0.00547203, device='cuda:0')
======decode end========
[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 1/1, 3.6 task/s, elapsed: 0s, ETA:     0s/paddle/mmdetection/mmdet/core/anchor/anchor_generator.py:323: UserWarning: ``grid_anchors`` would be deprecated soon. Please use ``grid_priors`` 
  warnings.warn('``grid_anchors`` would be deprecated soon. '
/paddle/mmdetection/mmdet/core/anchor/anchor_generator.py:360: UserWarning: ``single_level_grid_anchors`` would be deprecated soon. Please use ``single_level_grid_priors`` 
  '``single_level_grid_anchors`` would be deprecated soon. '

Evaluating bbox...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.02s).
Accumulating evaluation results...
DONE (t=0.08s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.362
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.580
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.339
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.300
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.559
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.900
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.497
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.497
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.497
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.333
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.900
OrderedDict([('bbox_mAP', 0.362), ('bbox_mAP_50', 0.58), ('bbox_mAP_75', 0.339), ('bbox_mAP_s', 0.3), ('bbox_mAP_m', 0.559), ('bbox_mAP_l', 0.9), ('bbox_mAP_copypaste', '0.362 0.580 0.339 0.300 0.559 0.900')])
